{
    "swagger": "2.0",
    "info": {
        "description": "This is the API for the Organizer application, providing a way to manage personal productivity modules.",
        "title": "Organizer API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support Team",
            "url": "https://www.example.com/support",
            "email": "kiv.426@google.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Authenticates a user and returns a JWT token upon successful login.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Log in an existing user",
                "parameters": [
                    {
                        "description": "User Login Credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully logged in",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserAuthResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error or invalid input (e.g., {\\\"error\\\": \\\"Invalid input: ...\\\"})",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials (e.g., {\\\"error\\\": \\\"Invalid credentials\\\"})",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal server error (e.g., {\\\"error\\\": \\\"Database error finding user\\\"})",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Creates a new user account and returns a JWT token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User Registration Data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RegisterInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully registered",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserAuthResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error or invalid input (e.g., {\\\"error\\\": \\\"Invalid input: Key: 'RegisterInput.Email' Error:Field validation for 'Email' failed on the 'email' tag\\\"})",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "409": {
                        "description": "User with this email already exists (e.g., {\\\"error\\\": \\\"User with this email already exists\\\"})",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal server error (e.g., {\\\"error\\\": \\\"Failed to hash password\\\"})",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/auth/validate-token": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Validates the provided JWT and returns user information if valid.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Validate JWT Token and get user info",
                "responses": {
                    "200": {
                        "description": "User data for valid token",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or invalid token (e.g., {\\\"error\\\": \\\"Unauthorized or invalid token\\\"})",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/knowledge-links": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of knowledge links for the current user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "knowledge-links"
                ],
                "summary": "Get all knowledge links for the authenticated user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.KnowledgeLink"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal server error (e.g., {\"error\": \"Failed to retrieve knowledge links\"})",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a new knowledge link for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "knowledge-links"
                ],
                "summary": "Create a new knowledge link",
                "parameters": [
                    {
                        "description": "Knowledge Link data",
                        "name": "link",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateKnowledgeLinkInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.KnowledgeLink"
                        }
                    },
                    "400": {
                        "description": "Invalid input (e.g., {\"error\": \"Invalid input: ...\"})",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal server error (e.g., {\"error\": \"Failed to create knowledge link\"})",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/knowledge-links/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a specific knowledge link by its ID, if it belongs to the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "knowledge-links"
                ],
                "summary": "Delete a knowledge link by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Knowledge Link ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Knowledge link deleted successfully (e.g., {\"message\": \"Knowledge link deleted successfully\"})",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "Knowledge link not found or access denied",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal server error (e.g., {\"error\": \"Failed to delete knowledge link\"})",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/notes": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of notes for the current user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notes"
                ],
                "summary": "Get all notes for the authenticated user",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Limit per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of notes with total count",
                        "schema": {
                            "$ref": "#/definitions/handlers.PaginatedNotesResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid limit or offset parameters (e.g., {\\\"error\\\": \\\"Invalid limit or offset parameters\\\"})",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal server error (e.g., {\\\"error\\\": \\\"Failed to count notes\\\"})",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a new note for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notes"
                ],
                "summary": "Create a new note",
                "parameters": [
                    {
                        "description": "Note data",
                        "name": "note",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateNoteInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Note"
                        }
                    },
                    "400": {
                        "description": "Invalid input (e.g., {\\\"error\\\": \\\"Invalid input: ...\\\"})",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal server error (e.g., {\\\"error\\\": \\\"Failed to create note\\\"})",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/notes/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific note by its ID, if it belongs to the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notes"
                ],
                "summary": "Get a single note by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Note ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Note"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "Note not found or access denied (e.g., {\\\"error\\\": \\\"Note not found or access denied\\\"})",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates a specific note by its ID, if it belongs to the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notes"
                ],
                "summary": "Update an existing note",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Note ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated note data",
                        "name": "note",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateNoteInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Note"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "Note not found or access denied",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal server error (e.g., {\\\"error\\\": \\\"Failed to update note\\\"})",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a specific note by its ID, if it belongs to the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notes"
                ],
                "summary": "Delete a note by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Note ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Note deleted successfully (e.g., {\\\"message\\\": \\\"Note deleted successfully\\\"})",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "Note not found or access denied",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal server error (e.g., {\\\"error\\\": \\\"Failed to delete note\\\"})",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get profile information for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get current user's profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (e.g., {\\\"error\\\": \\\"User ID not found in token\\\"})",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "User not found (e.g., {\\\"error\\\": \\\"User not found\\\"})",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update profile information for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update current user's profile",
                "parameters": [
                    {
                        "description": "Profile Update Data",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateUserProfileInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Invalid input (e.g., {\\\"error\\\": \\\"Возраст должен быть корректным положительным числом\\\"})",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal server error (e.g., {\\\"error\\\": \\\"Failed to update profile\\\"})",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/users/me/password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Change password for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Change current user's password",
                "parameters": [
                    {
                        "description": "Password Change Data",
                        "name": "passwords",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ChangePasswordInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully (e.g., {\\\"message\\\": \\\"Password changed successfully\\\"})",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Invalid input (e.g., {\\\"error\\\": \\\"Новые пароли не совпадают\\\"})",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or incorrect current password (e.g., {\\\"error\\\": \\\"Incorrect current password\\\"})",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal server error (e.g., {\\\"error\\\": \\\"Failed to update password\\\"})",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/weather": {
            "get": {
                "description": "Fetches current weather information from OpenWeatherMap, WeatherAPI.com, and Open-Meteo.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "weather"
                ],
                "summary": "Get weather data for a city from multiple sources",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"London\"",
                        "description": "City name to fetch weather for",
                        "name": "city",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.WeatherResponse"
                        }
                    },
                    "400": {
                        "description": "City parameter is missing (e.g., {\\\"error\\\": \\\"City parameter is required\\\"})",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch weather data or all sources failed (e.g., {\\\"error\\\": \\\"Failed to fetch weather data from any source\\\"})",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.ChangePasswordInput": {
            "type": "object",
            "required": [
                "currentPassword",
                "newPassword"
            ],
            "properties": {
                "currentPassword": {
                    "type": "string"
                },
                "newPassword": {
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "handlers.CreateKnowledgeLinkInput": {
            "type": "object",
            "required": [
                "url"
            ],
            "properties": {
                "title": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "handlers.CreateNoteInput": {
            "type": "object",
            "required": [
                "content"
            ],
            "properties": {
                "content": {
                    "description": "Content is required",
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "handlers.LoginInput": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "password123"
                }
            }
        },
        "handlers.PaginatedNotesResponse": {
            "type": "object",
            "properties": {
                "notes": {
                    "description": "Массив заметок",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Note"
                    }
                },
                "totalCount": {
                    "description": "Общее количество заметок, подходящих под критерии (до пагинации)",
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "handlers.RegisterInput": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "age": {
                    "type": "integer",
                    "example": 30
                },
                "contacts": {
                    "type": "string",
                    "example": "+1234567890"
                },
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "fullname": {
                    "type": "string",
                    "example": "John Doe"
                },
                "password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "password123"
                }
            }
        },
        "handlers.UpdateNoteInput": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "handlers.UpdateUserProfileInput": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "contacts": {
                    "type": "string"
                },
                "fullname": {
                    "type": "string"
                }
            }
        },
        "handlers.UserAuthResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "user": {
                    "description": "User model without PasswordHash",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.User"
                        }
                    ]
                }
            }
        },
        "models.KnowledgeLink": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "models.Note": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "date": {
                    "description": "Compatibility with frontend mock",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "description": "Foreign key",
                    "type": "integer"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "contacts": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "fullname": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "telegramHash": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.WeatherResponse": {
            "type": "object",
            "properties": {
                "averageTemp": {
                    "type": "number"
                },
                "city": {
                    "type": "string"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.WeatherSource"
                    }
                }
            }
        },
        "models.WeatherSource": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "temp": {
                    "description": "Temperature in Celsius",
                    "type": "number"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token. Example: \"Bearer {token}\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}